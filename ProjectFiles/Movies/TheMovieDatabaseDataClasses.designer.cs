#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Movies
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TheMovieDatabase")]
	public partial class TheMovieDatabaseDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCastAndCrew(CastAndCrew instance);
    partial void UpdateCastAndCrew(CastAndCrew instance);
    partial void DeleteCastAndCrew(CastAndCrew instance);
    partial void InsertGenres(Genres instance);
    partial void UpdateGenres(Genres instance);
    partial void DeleteGenres(Genres instance);
    partial void InsertMovieDirectors(MovieDirectors instance);
    partial void UpdateMovieDirectors(MovieDirectors instance);
    partial void DeleteMovieDirectors(MovieDirectors instance);
    partial void InsertMovieGenres(MovieGenres instance);
    partial void UpdateMovieGenres(MovieGenres instance);
    partial void DeleteMovieGenres(MovieGenres instance);
    partial void InsertMovies(Movies instance);
    partial void UpdateMovies(Movies instance);
    partial void DeleteMovies(Movies instance);
    partial void InsertMovieWriters(MovieWriters instance);
    partial void UpdateMovieWriters(MovieWriters instance);
    partial void DeleteMovieWriters(MovieWriters instance);
    partial void InsertRatings(Ratings instance);
    partial void UpdateRatings(Ratings instance);
    partial void DeleteRatings(Ratings instance);
    partial void InsertWantToSee(WantToSee instance);
    partial void UpdateWantToSee(WantToSee instance);
    partial void DeleteWantToSee(WantToSee instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public TheMovieDatabaseDataClassesDataContext() : 
				base(global::Movies.Properties.Settings.Default.TheMovieDatabaseConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public TheMovieDatabaseDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TheMovieDatabaseDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TheMovieDatabaseDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TheMovieDatabaseDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CastAndCrew> CastAndCrews
		{
			get
			{
				return this.GetTable<CastAndCrew>();
			}
		}
		
		public System.Data.Linq.Table<Genres> Genres
		{
			get
			{
				return this.GetTable<Genres>();
			}
		}
		
		public System.Data.Linq.Table<MovieDirectors> MovieDirectors
		{
			get
			{
				return this.GetTable<MovieDirectors>();
			}
		}
		
		public System.Data.Linq.Table<MovieGenres> MovieGenres
		{
			get
			{
				return this.GetTable<MovieGenres>();
			}
		}
		
		public System.Data.Linq.Table<Movies> Movies
		{
			get
			{
				return this.GetTable<Movies>();
			}
		}
		
		public System.Data.Linq.Table<MovieWriters> MovieWriters
		{
			get
			{
				return this.GetTable<MovieWriters>();
			}
		}
		
		public System.Data.Linq.Table<Ratings> Ratings
		{
			get
			{
				return this.GetTable<Ratings>();
			}
		}
		
		public System.Data.Linq.Table<WantToSee> WantToSees
		{
			get
			{
				return this.GetTable<WantToSee>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Top10Movies> Top10Movies
		{
			get
			{
				return this.GetTable<Top10Movies>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.funMovieRate", IsComposable=true)]
		public System.Nullable<double> funMovieRate([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.uspMovieByGenre")]
		public ISingleResult<uspMovieByGenreResult> uspMovieByGenre([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string genre)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), genre);
			return ((ISingleResult<uspMovieByGenreResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CastAndCrew")]
	public partial class CastAndCrew : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<MovieDirectors> _MovieDirectors;
		
		private EntitySet<MovieWriters> _MovieWriters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public CastAndCrew()
		{
			this._MovieDirectors = new EntitySet<MovieDirectors>(new Action<MovieDirectors>(this.attach_MovieDirectors), new Action<MovieDirectors>(this.detach_MovieDirectors));
			this._MovieWriters = new EntitySet<MovieWriters>(new Action<MovieWriters>(this.attach_MovieWriters), new Action<MovieWriters>(this.detach_MovieWriters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CastAndCrew_MovieDirectors", Storage="_MovieDirectors", ThisKey="PersonID", OtherKey="PersonID")]
		public EntitySet<MovieDirectors> MovieDirectors
		{
			get
			{
				return this._MovieDirectors;
			}
			set
			{
				this._MovieDirectors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CastAndCrew_MovieWriters", Storage="_MovieWriters", ThisKey="PersonID", OtherKey="PersonID")]
		public EntitySet<MovieWriters> MovieWriters
		{
			get
			{
				return this._MovieWriters;
			}
			set
			{
				this._MovieWriters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieDirectors(MovieDirectors entity)
		{
			this.SendPropertyChanging();
			entity.CastAndCrew = this;
		}
		
		private void detach_MovieDirectors(MovieDirectors entity)
		{
			this.SendPropertyChanging();
			entity.CastAndCrew = null;
		}
		
		private void attach_MovieWriters(MovieWriters entity)
		{
			this.SendPropertyChanging();
			entity.CastAndCrew = this;
		}
		
		private void detach_MovieWriters(MovieWriters entity)
		{
			this.SendPropertyChanging();
			entity.CastAndCrew = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genres")]
	public partial class Genres : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenreID;
		
		private string _Name;
		
		private EntitySet<MovieGenres> _MovieGenres;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Genres()
		{
			this._MovieGenres = new EntitySet<MovieGenres>(new Action<MovieGenres>(this.attach_MovieGenres), new Action<MovieGenres>(this.detach_MovieGenres));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genres_MovieGenres", Storage="_MovieGenres", ThisKey="GenreID", OtherKey="GenreID")]
		public EntitySet<MovieGenres> MovieGenres
		{
			get
			{
				return this._MovieGenres;
			}
			set
			{
				this._MovieGenres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieGenres(MovieGenres entity)
		{
			this.SendPropertyChanging();
			entity.Genres = this;
		}
		
		private void detach_MovieGenres(MovieGenres entity)
		{
			this.SendPropertyChanging();
			entity.Genres = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieDirectors")]
	public partial class MovieDirectors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieDirectorsID;
		
		private int _MovieID;
		
		private int _PersonID;
		
		private EntityRef<CastAndCrew> _CastAndCrew;
		
		private EntityRef<Movies> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieDirectorsIDChanging(int value);
    partial void OnMovieDirectorsIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
		
		public MovieDirectors()
		{
			this._CastAndCrew = default(EntityRef<CastAndCrew>);
			this._Movies = default(EntityRef<Movies>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieDirectorsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MovieDirectorsID
		{
			get
			{
				return this._MovieDirectorsID;
			}
			set
			{
				if ((this._MovieDirectorsID != value))
				{
					this.OnMovieDirectorsIDChanging(value);
					this.SendPropertyChanging();
					this._MovieDirectorsID = value;
					this.SendPropertyChanged("MovieDirectorsID");
					this.OnMovieDirectorsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._CastAndCrew.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CastAndCrew_MovieDirectors", Storage="_CastAndCrew", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true)]
		public CastAndCrew CastAndCrew
		{
			get
			{
				return this._CastAndCrew.Entity;
			}
			set
			{
				CastAndCrew previousValue = this._CastAndCrew.Entity;
				if (((previousValue != value) 
							|| (this._CastAndCrew.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CastAndCrew.Entity = null;
						previousValue.MovieDirectors.Remove(this);
					}
					this._CastAndCrew.Entity = value;
					if ((value != null))
					{
						value.MovieDirectors.Add(this);
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("CastAndCrew");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_MovieDirectors", Storage="_Movies", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movies Movies
		{
			get
			{
				return this._Movies.Entity;
			}
			set
			{
				Movies previousValue = this._Movies.Entity;
				if (((previousValue != value) 
							|| (this._Movies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movies.Entity = null;
						previousValue.MovieDirectors.Remove(this);
					}
					this._Movies.Entity = value;
					if ((value != null))
					{
						value.MovieDirectors.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movies");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieGenres")]
	public partial class MovieGenres : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieGenresID;
		
		private int _GenreID;
		
		private int _MovieID;
		
		private EntityRef<Genres> _Genres;
		
		private EntityRef<Movies> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieGenresIDChanging(int value);
    partial void OnMovieGenresIDChanged();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    #endregion
		
		public MovieGenres()
		{
			this._Genres = default(EntityRef<Genres>);
			this._Movies = default(EntityRef<Movies>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieGenresID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MovieGenresID
		{
			get
			{
				return this._MovieGenresID;
			}
			set
			{
				if ((this._MovieGenresID != value))
				{
					this.OnMovieGenresIDChanging(value);
					this.SendPropertyChanging();
					this._MovieGenresID = value;
					this.SendPropertyChanged("MovieGenresID");
					this.OnMovieGenresIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="Int NOT NULL")]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					if (this._Genres.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genres_MovieGenres", Storage="_Genres", ThisKey="GenreID", OtherKey="GenreID", IsForeignKey=true)]
		public Genres Genres
		{
			get
			{
				return this._Genres.Entity;
			}
			set
			{
				Genres previousValue = this._Genres.Entity;
				if (((previousValue != value) 
							|| (this._Genres.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genres.Entity = null;
						previousValue.MovieGenres.Remove(this);
					}
					this._Genres.Entity = value;
					if ((value != null))
					{
						value.MovieGenres.Add(this);
						this._GenreID = value.GenreID;
					}
					else
					{
						this._GenreID = default(int);
					}
					this.SendPropertyChanged("Genres");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_MovieGenres", Storage="_Movies", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movies Movies
		{
			get
			{
				return this._Movies.Entity;
			}
			set
			{
				Movies previousValue = this._Movies.Entity;
				if (((previousValue != value) 
							|| (this._Movies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movies.Entity = null;
						previousValue.MovieGenres.Remove(this);
					}
					this._Movies.Entity = value;
					if ((value != null))
					{
						value.MovieGenres.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movies");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movies")]
	public partial class Movies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private string _Title;
		
		private System.DateTime _ReleaseDate;
		
		private System.Nullable<System.TimeSpan> _Runtime;
		
		private string _Overview;
		
		private System.Data.Linq.Binary _Cover;
		
		private EntitySet<MovieDirectors> _MovieDirectors;
		
		private EntitySet<MovieGenres> _MovieGenres;
		
		private EntitySet<MovieWriters> _MovieWriters;
		
		private EntitySet<Ratings> _Ratings;
		
		private EntitySet<WantToSee> _WantToSees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnReleaseDateChanging(System.DateTime value);
    partial void OnReleaseDateChanged();
    partial void OnRuntimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnRuntimeChanged();
    partial void OnOverviewChanging(string value);
    partial void OnOverviewChanged();
    partial void OnCoverChanging(System.Data.Linq.Binary value);
    partial void OnCoverChanged();
    #endregion
		
		public Movies()
		{
			this._MovieDirectors = new EntitySet<MovieDirectors>(new Action<MovieDirectors>(this.attach_MovieDirectors), new Action<MovieDirectors>(this.detach_MovieDirectors));
			this._MovieGenres = new EntitySet<MovieGenres>(new Action<MovieGenres>(this.attach_MovieGenres), new Action<MovieGenres>(this.detach_MovieGenres));
			this._MovieWriters = new EntitySet<MovieWriters>(new Action<MovieWriters>(this.attach_MovieWriters), new Action<MovieWriters>(this.detach_MovieWriters));
			this._Ratings = new EntitySet<Ratings>(new Action<Ratings>(this.attach_Ratings), new Action<Ratings>(this.detach_Ratings));
			this._WantToSees = new EntitySet<WantToSee>(new Action<WantToSee>(this.attach_WantToSees), new Action<WantToSee>(this.detach_WantToSees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseDate", DbType="Date NOT NULL")]
		public System.DateTime ReleaseDate
		{
			get
			{
				return this._ReleaseDate;
			}
			set
			{
				if ((this._ReleaseDate != value))
				{
					this.OnReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._ReleaseDate = value;
					this.SendPropertyChanged("ReleaseDate");
					this.OnReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Runtime", DbType="Time")]
		public System.Nullable<System.TimeSpan> Runtime
		{
			get
			{
				return this._Runtime;
			}
			set
			{
				if ((this._Runtime != value))
				{
					this.OnRuntimeChanging(value);
					this.SendPropertyChanging();
					this._Runtime = value;
					this.SendPropertyChanged("Runtime");
					this.OnRuntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Overview", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Overview
		{
			get
			{
				return this._Overview;
			}
			set
			{
				if ((this._Overview != value))
				{
					this.OnOverviewChanging(value);
					this.SendPropertyChanging();
					this._Overview = value;
					this.SendPropertyChanged("Overview");
					this.OnOverviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cover", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Cover
		{
			get
			{
				return this._Cover;
			}
			set
			{
				if ((this._Cover != value))
				{
					this.OnCoverChanging(value);
					this.SendPropertyChanging();
					this._Cover = value;
					this.SendPropertyChanged("Cover");
					this.OnCoverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_MovieDirectors", Storage="_MovieDirectors", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<MovieDirectors> MovieDirectors
		{
			get
			{
				return this._MovieDirectors;
			}
			set
			{
				this._MovieDirectors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_MovieGenres", Storage="_MovieGenres", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<MovieGenres> MovieGenres
		{
			get
			{
				return this._MovieGenres;
			}
			set
			{
				this._MovieGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_MovieWriters", Storage="_MovieWriters", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<MovieWriters> MovieWriters
		{
			get
			{
				return this._MovieWriters;
			}
			set
			{
				this._MovieWriters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_Ratings", Storage="_Ratings", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<Ratings> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_WantToSee", Storage="_WantToSees", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<WantToSee> WantToSees
		{
			get
			{
				return this._WantToSees;
			}
			set
			{
				this._WantToSees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieDirectors(MovieDirectors entity)
		{
			this.SendPropertyChanging();
			entity.Movies = this;
		}
		
		private void detach_MovieDirectors(MovieDirectors entity)
		{
			this.SendPropertyChanging();
			entity.Movies = null;
		}
		
		private void attach_MovieGenres(MovieGenres entity)
		{
			this.SendPropertyChanging();
			entity.Movies = this;
		}
		
		private void detach_MovieGenres(MovieGenres entity)
		{
			this.SendPropertyChanging();
			entity.Movies = null;
		}
		
		private void attach_MovieWriters(MovieWriters entity)
		{
			this.SendPropertyChanging();
			entity.Movies = this;
		}
		
		private void detach_MovieWriters(MovieWriters entity)
		{
			this.SendPropertyChanging();
			entity.Movies = null;
		}
		
		private void attach_Ratings(Ratings entity)
		{
			this.SendPropertyChanging();
			entity.Movies = this;
		}
		
		private void detach_Ratings(Ratings entity)
		{
			this.SendPropertyChanging();
			entity.Movies = null;
		}
		
		private void attach_WantToSees(WantToSee entity)
		{
			this.SendPropertyChanging();
			entity.Movies = this;
		}
		
		private void detach_WantToSees(WantToSee entity)
		{
			this.SendPropertyChanging();
			entity.Movies = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieWriters")]
	public partial class MovieWriters : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieWritersID;
		
		private int _MovieID;
		
		private int _PersonID;
		
		private EntityRef<CastAndCrew> _CastAndCrew;
		
		private EntityRef<Movies> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieWritersIDChanging(int value);
    partial void OnMovieWritersIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
		
		public MovieWriters()
		{
			this._CastAndCrew = default(EntityRef<CastAndCrew>);
			this._Movies = default(EntityRef<Movies>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieWritersID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MovieWritersID
		{
			get
			{
				return this._MovieWritersID;
			}
			set
			{
				if ((this._MovieWritersID != value))
				{
					this.OnMovieWritersIDChanging(value);
					this.SendPropertyChanging();
					this._MovieWritersID = value;
					this.SendPropertyChanged("MovieWritersID");
					this.OnMovieWritersIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._CastAndCrew.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CastAndCrew_MovieWriters", Storage="_CastAndCrew", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true)]
		public CastAndCrew CastAndCrew
		{
			get
			{
				return this._CastAndCrew.Entity;
			}
			set
			{
				CastAndCrew previousValue = this._CastAndCrew.Entity;
				if (((previousValue != value) 
							|| (this._CastAndCrew.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CastAndCrew.Entity = null;
						previousValue.MovieWriters.Remove(this);
					}
					this._CastAndCrew.Entity = value;
					if ((value != null))
					{
						value.MovieWriters.Add(this);
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("CastAndCrew");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_MovieWriters", Storage="_Movies", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movies Movies
		{
			get
			{
				return this._Movies.Entity;
			}
			set
			{
				Movies previousValue = this._Movies.Entity;
				if (((previousValue != value) 
							|| (this._Movies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movies.Entity = null;
						previousValue.MovieWriters.Remove(this);
					}
					this._Movies.Entity = value;
					if ((value != null))
					{
						value.MovieWriters.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movies");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ratings")]
	public partial class Ratings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieRatingsID;
		
		private int _MovieID;
		
		private int _UserID;
		
		private int _Rate;
		
		private EntityRef<Movies> _Movies;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieRatingsIDChanging(int value);
    partial void OnMovieRatingsIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRateChanging(int value);
    partial void OnRateChanged();
    #endregion
		
		public Ratings()
		{
			this._Movies = default(EntityRef<Movies>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieRatingsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MovieRatingsID
		{
			get
			{
				return this._MovieRatingsID;
			}
			set
			{
				if ((this._MovieRatingsID != value))
				{
					this.OnMovieRatingsIDChanging(value);
					this.SendPropertyChanging();
					this._MovieRatingsID = value;
					this.SendPropertyChanged("MovieRatingsID");
					this.OnMovieRatingsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Int NOT NULL")]
		public int Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_Ratings", Storage="_Movies", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movies Movies
		{
			get
			{
				return this._Movies.Entity;
			}
			set
			{
				Movies previousValue = this._Movies.Entity;
				if (((previousValue != value) 
							|| (this._Movies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movies.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._Movies.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Ratings", Storage="_Users", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WantToSee")]
	public partial class WantToSee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WantToSeeID;
		
		private int _UserID;
		
		private int _MovieID;
		
		private EntityRef<Movies> _Movies;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWantToSeeIDChanging(int value);
    partial void OnWantToSeeIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    #endregion
		
		public WantToSee()
		{
			this._Movies = default(EntityRef<Movies>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WantToSeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WantToSeeID
		{
			get
			{
				return this._WantToSeeID;
			}
			set
			{
				if ((this._WantToSeeID != value))
				{
					this.OnWantToSeeIDChanging(value);
					this.SendPropertyChanging();
					this._WantToSeeID = value;
					this.SendPropertyChanged("WantToSeeID");
					this.OnWantToSeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movies_WantToSee", Storage="_Movies", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movies Movies
		{
			get
			{
				return this._Movies.Entity;
			}
			set
			{
				Movies previousValue = this._Movies.Entity;
				if (((previousValue != value) 
							|| (this._Movies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movies.Entity = null;
						previousValue.WantToSees.Remove(this);
					}
					this._Movies.Entity = value;
					if ((value != null))
					{
						value.WantToSees.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_WantToSee", Storage="_Users", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.WantToSees.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.WantToSees.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Email;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _UserType;
		
		private EntitySet<Ratings> _Ratings;
		
		private EntitySet<WantToSee> _WantToSees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnUserTypeChanging(string value);
    partial void OnUserTypeChanged();
    #endregion
		
		public Users()
		{
			this._Ratings = new EntitySet<Ratings>(new Action<Ratings>(this.attach_Ratings), new Action<Ratings>(this.detach_Ratings));
			this._WantToSees = new EntitySet<WantToSee>(new Action<WantToSee>(this.attach_WantToSees), new Action<WantToSee>(this.detach_WantToSees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Ratings", Storage="_Ratings", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Ratings> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_WantToSee", Storage="_WantToSees", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<WantToSee> WantToSees
		{
			get
			{
				return this._WantToSees;
			}
			set
			{
				this._WantToSees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ratings(Ratings entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Ratings(Ratings entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_WantToSees(WantToSee entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_WantToSees(WantToSee entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Top10Movies")]
	public partial class Top10Movies
	{
		
		private string _Title;
		
		private System.Nullable<double> _Average;
		
		public Top10Movies()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Average", DbType="Float")]
		public System.Nullable<double> Average
		{
			get
			{
				return this._Average;
			}
			set
			{
				if ((this._Average != value))
				{
					this._Average = value;
				}
			}
		}
	}
	
	public partial class uspMovieByGenreResult
	{
		
		private int _MovieID;
		
		private string _Title;
		
		public uspMovieByGenreResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					this._MovieID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
